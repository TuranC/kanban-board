{"version":3,"sources":["components/column/columnSettings/ColumnSettings.js","components/column/columnInput/ColumnInput.js","components/card/cardInput/CardInput.js","components/card/Card.js","components/column/columnCardList/ColumnCardList.js","components/column/columnMain/ColumnMain.js","components/column/Column.js","utilities/dndMoves/dndMoves.js","App.js","db/DB.js","redux/appReducer/appReducer.js","index.js"],"names":["connect","column","provided","handleSettingsColumnClicked","handleDeleteColumn","className","dragHandleProps","title","type","onClick","columnId","ColumnInput","props","handleChange","event","state","input","length","setState","target","value","handleSubmit","preventDefault","handleEditingColumnTitle","dispatch","id","newTitle","this","children","onSubmit","onChange","placeholder","React","Component","CardInput","card","handleEditCard","cardId","ref","innerRef","draggableProps","content","Card","handleMouseOver","mouseOn","handleMouseOut","isClicked","formOrTitle","handleInputOrTitle","index","handleDeleteCard","draggableId","onMouseOver","onMouseOut","hidden","ColumnCardList","getCards","cards","map","key","cardList","handleAddCard","droppableId","droppableProps","style","height","data","columns","columnOrder","ColumnMain","editingColumnTitle","inputOrTitle","currentCard","handleGetCards","cardIds","elemId","Column","settingsColumnClicked","moveCardInColumn","result","destination","source","start","newCardIds","Array","from","splice","newColumn","App","onDragEnd","newState","to","handleAddColumn","columnList","direction","connectDB","a","openDB","upgrade","database","dBase","createObjectStore","createIndex","db","transaction","objectStore","get","put","fromArrayToObj","obj","elem","fromArrayCardToObj","getAllData","store","getAll","push","add","columnOrderIndex","delete","newColumnOrder","position","newStart","newFinish","addColumn","Math","floor","random","hasTitle","addColumnDB","moveTo","moveToDB","setColumnTitle","setColumnTitleDB","deleteColumn","deleteColumnDB","indexOf","addCard","newCard","columnCards","hasCardTitle","addCardDB","deleteCard","deleteCardDB","moveToCard","moveCardToDB","moveCardToNewColumn","finish","startCardIds","finishCardIds","moveCardToNewColumnDB","setCardTitle","setCardTitleDB","appReducer","action","createStore","app","ReactDOM","render","document","getElementById"],"mappings":"8dA0CeA,G,YAAAA,eArCQ,SAAC,GAAD,IACrBC,EADqB,EACrBA,OACAC,EAFqB,EAErBA,SACAC,EAHqB,EAGrBA,4BACAC,EAJqB,EAIrBA,mBAJqB,OAMrB,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,0BACb,wCAAQH,EAASI,gBAAjB,CAAkCD,UAAU,0BACzCJ,EAAOM,MACP,IAFH,YAKA,4BAAQC,KAAK,SAASC,QAASN,EAA6BE,UAAU,gCACpE,uBAAGA,UAAU,mBAGjB,yBAAKA,UAAU,8BACb,4BAAQG,KAAK,SAASC,QAAS,kBAAML,EAAmBH,EAAOS,WAAWL,UAAU,qCAApF,uBClBAM,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,aAAe,SAACC,GACI,EAAKC,MAAfC,MACEC,OAAS,IACjB,EAAKC,SAAS,CACZF,MAAOF,EAAMK,OAAOC,SAZP,EAiBnBC,aAAe,SAACP,GACdA,EAAMQ,iBADkB,MAE+B,EAAKV,MAApDW,EAFgB,EAEhBA,yBAA0BC,EAFV,EAEUA,SAAUvB,EAFpB,EAEoBA,OACpCe,EAAU,EAAKD,MAAfC,MAERO,GAAyB,GACX,KAAVP,GACFQ,EAAS,CAAEhB,KAAM,mBAAoBiB,GAAIxB,EAAOS,SAAUgB,SAAUV,KArBtE,EAAKD,MAAQ,CACXC,MAAO,IAJQ,E,qDA4BT,IAAD,EACgCW,KAAKf,MAApCV,EADD,EACCA,SAAUD,EADX,EACWA,OAAQ2B,EADnB,EACmBA,SAClBZ,EAAUW,KAAKZ,MAAfC,MACR,OACE,oCACE,wCAAMa,SAAUF,KAAKN,cAAkBnB,EAASI,gBAAhD,CAAiED,UAAU,gBACzE,2BACEG,KAAK,OACLsB,SAAUH,KAAKd,aACfO,MAAOJ,EACPX,UAAU,oBACV0B,YAA8B,KAAjB9B,EAAOM,MAAe,YAAcN,EAAOM,QAE1D,4BAAQC,KAAK,SAASH,UAAU,sBAAqB,uBAAGA,UAAU,mBAEnEuB,O,GA5CiBI,IAAMC,YAyDjBjC,gBAAUW,GCzDnBuB,G,wDACJ,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAORC,aAAe,SAACC,GACd,EAAKI,SAAS,CACZF,MAAOF,EAAMK,OAAOC,SAVL,EAcnBC,aAAe,SAACP,GAAW,IACjBE,EAAU,EAAKD,MAAfC,MADgB,EAEmB,EAAKJ,MAAxCY,EAFgB,EAEhBA,SAAUW,EAFM,EAENA,KAAMC,EAFA,EAEAA,eACpBpB,EAAMC,OAAS,IACjBO,EAAS,CACPhB,KAAM,iBACNiB,GAAIU,EAAKE,OACTX,SAAUV,IAGZ,EAAKE,SAAS,CACZF,WAGJoB,GAAe,GACftB,EAAMQ,kBA1BN,EAAKP,MAAQ,CACXC,MAAO,IAJQ,E,qDAgCT,IAAD,EACoBW,KAAKf,MAAxBV,EADD,EACCA,SAAUiC,EADX,EACWA,KACVnB,EAAUW,KAAKZ,MAAfC,MACR,OACE,uCACEsB,IAAKpC,EAASqC,UACVrC,EAASI,gBACTJ,EAASsC,eAHf,CAIEnC,UAAU,SAEV,0BAAMA,UAAU,YAAYwB,SAAUF,KAAKN,cACzC,2BACEhB,UAAU,kBACVG,KAAK,OACLY,MAAOJ,EACPc,SAAUH,KAAKd,aACfkB,YAA8B,KAAjBI,EAAKM,QAAiB,iBAAmBN,EAAKM,UAE7D,4BAAQjC,KAAK,SAASH,UAAU,oBAAmB,uBAAGA,UAAU,wB,GAnDlD2B,IAAMC,YAiEfjC,gBAAUkC,GC/DnBQ,G,wDACJ,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IAQR+B,gBAAkB,WAChB,EAAKzB,SAAS,CACZ0B,SAAS,KAXM,EAenBC,eAAiB,WACf,EAAK3B,SAAS,CACZ0B,SAAS,KAjBM,EAqBnBR,eAAiB,SAACU,GAChB,EAAK5B,SAAS,CACZ6B,aAAcD,KAvBC,EA2BnBE,mBAAqB,WAAO,IAClBb,EAAS,EAAKvB,MAAduB,KACAY,EAAgB,EAAKhC,MAArBgC,YAER,MAAqB,KAAjBZ,EAAKM,SACa,IAAhBM,EAMe,KAAjBZ,EAAKM,SACa,IAAhBM,OADN,GAnCA,EAAKhC,MAAQ,CACX6B,SAAS,EACTG,aAAa,GALE,E,qDA8CT,IAAD,SACmCpB,KAAKf,MAAvCuB,EADD,EACCA,KAAMc,EADP,EACOA,MAAOC,EADd,EACcA,iBACbN,EAAYjB,KAAKZ,MAAjB6B,QACR,OACE,kBAAC,IAAD,CAAWO,YAAahB,EAAKE,OAAQY,MAAOA,IACzC,SAAC/C,GAAD,OACC,6BACG,EAAK8C,qBACJ,uCACEV,IAAKpC,EAASqC,UACVrC,EAASsC,eACTtC,EAASI,gBAHf,CAIED,UAAU,OACV+C,YAAa,EAAKT,gBAClBU,WAAY,EAAKR,iBAEjB,2BAAIV,EAAKM,SACT,yBAAKpC,UAAU,gBACb,4BACEG,KAAK,SACLC,QAAS,kBAAM,EAAK2B,gBAAe,IACnC/B,UAAU,WACViD,OAAQV,GAER,uBAAGvC,UAAU,iBAEf,4BACEG,KAAK,SACLC,QAAS,kBAAMyC,EAAiBf,EAAKE,SACrChC,UAAU,WACViD,OAAQV,GAER,uBAAGvC,UAAU,wBAIjB,kBAAC,EAAD,CAAWH,SAAUA,EAAUiC,KAAMA,EAAMC,eAAgB,EAAKA,yB,GAnF7DJ,IAAMC,YAiGVjC,gBAAU0C,GCjGnBa,G,kNACJC,SAAW,SAACC,GAAD,OAAWA,EAAMC,KAAI,SAACvB,EAAMc,GAAW,IAAD,EACV,EAAKrC,MAAlCX,EADuC,EACvCA,OAAQiD,EAD+B,EAC/BA,iBAChB,OACE,kBAAC,EAAD,CACES,IAAKxB,EAAKE,OACVpC,OAAQA,EACRkC,KAAMA,EACNc,MAAOA,EACPC,iBAAkBA,Q,uDAKd,IAAD,SACqCvB,KAAKf,MAAzCX,EADD,EACCA,OAAQ2D,EADT,EACSA,SAAUC,EADnB,EACmBA,cAC1B,OACE,yBAAKxD,UAAU,oBACb,kBAAC,IAAD,CAAWyD,YAAa7D,EAAOS,SAAUF,KAAK,UAC3C,SAACN,GAAD,OACC,oCACE,uCACEoC,IAAKpC,EAASqC,UACVrC,EAAS6D,eAFf,CAGE1D,UAAU,yBACV2D,MAA2B,IAApBJ,EAAS3C,OAAe,CAAEgD,OAAQ,QAAW,OAEnD,EAAKT,SAASI,GACd1D,EAAS6B,aAEZ,4BAAQvB,KAAK,SAASH,UAAU,8BAA8BI,QAASoD,GAAvE,qB,GA9Be7B,IAAMC,YAuDpBjC,mBARf,SAAyBe,GACvB,MAAO,CACL0C,MAAO1C,EAAMmD,KAAKT,MAClBU,QAASpD,EAAMmD,KAAKC,QACpBC,YAAarD,EAAMmD,KAAKE,eAIbpE,CAAyBuD,GCvDlCc,G,wDACJ,WAAYzD,GAAQ,IAAD,8BACjB,cAAMA,IAORW,yBAA2B,SAACuB,GAC1B,EAAK5B,SAAS,CACZoD,oBAAqBxB,KAVN,EAcnByB,aAAe,WAAO,IACZtE,EAAW,EAAKW,MAAhBX,OACAqE,EAAuB,EAAKvD,MAA5BuD,mBACR,MAAqB,KAAjBrE,EAAOM,OACkB,IAAvB+D,EAMe,KAAjBrE,EAAOM,OACkB,IAAvB+D,OADN,GAxBiB,EAgCnBT,cAAgB,WAAO,IAAD,EACgB,EAAKjD,MAAjCY,EADY,EACZA,SAAUiC,EADE,EACFA,MAClBjC,EAAS,CAAEhB,KAAM,WAAYE,SAFT,EACKT,OACqBS,WAC9C,EAAKQ,SAAS,CACZuC,WApCe,EAwCnBP,iBAAmB,SAACb,GAAY,IAAD,EACA,EAAKzB,OAClCY,EAF6B,EACrBA,UACC,CACPhB,KAAM,cACNE,SAJ2B,EACXT,OAGCS,SACjB2B,WAEF,EAAKnB,SAAS,CACZsD,YAAa,aAhDE,EAoDnBC,eAAiB,WAAO,IAAD,EACK,EAAK7D,MAAvBX,EADa,EACbA,OAAQwD,EADK,EACLA,MAChB,OAAOxD,EAAOyE,QAAQhB,KAAI,SAACiB,GAAD,OAAYlB,EAAMkB,OAnD5C,EAAK5D,MAAQ,CACXuD,oBAAoB,GAJL,E,qDAyDT,IAAD,SACmD3C,KAAKf,MAAvDX,EADD,EACCA,OAAQC,EADT,EACSA,SAAUC,EADnB,EACmBA,4BAC1B,OACE,oCACGwB,KAAK4C,eACJ,kBAAC,EAAD,CACErE,SAAUA,EACVqB,yBAA0BI,KAAKJ,yBAC/BtB,OAAQA,GAER,kBAAC,EAAD,CACE2D,SAAUjC,KAAK8C,iBACfZ,cAAelC,KAAKkC,cACpBX,iBAAkBvB,KAAKuB,iBACvBjD,OAAQA,KAKV,oCACE,uCAAKI,UAAU,eAAkBH,EAASI,iBACxC,wBACED,UAAU,eACVI,QAAS,kBAAM,EAAKc,0BAAyB,KAE5CtB,EAAOM,OAEV,4BACEC,KAAK,SACLC,QAASN,EACTE,UAAU,0BAEV,uBAAGA,UAAU,wBAGjB,kBAAC,EAAD,CACEuD,SAAUjC,KAAK8C,iBACfZ,cAAelC,KAAKkC,cACpBX,iBAAkBvB,KAAKuB,iBACvBjD,OAAQA,U,GAjGC+B,IAAMC,YA+HhBjC,mBANf,SAAyBe,GACvB,MAAO,CACL0C,MAAO1C,EAAMmD,KAAKT,SAIPzD,CAAyBqE,GC9HlCO,E,kDACJ,WAAYhE,GAAQ,IAAD,8BACjB,cAAMA,IAORT,4BAA8B,WAC5B,EAAKe,SAAS,CACZ2D,uBAAwB,EAAK9D,MAAM8D,yBAPrC,EAAK9D,MAAQ,CACX8D,uBAAuB,GAJR,E,qDAcT,IAAD,SAGHlD,KAAKf,MADPX,EAFK,EAELA,OAAQgD,EAFH,EAEGA,MAAO7C,EAFV,EAEUA,mBAETyE,EAA0BlD,KAAKZ,MAA/B8D,sBACR,OACE,kBAAC,IAAD,CAAW1B,YAAalD,EAAOS,SAAUuC,MAAOA,IAC7C,SAAC/C,GAAD,OACC,uCACEG,UAAU,SACViC,IAAKpC,EAASqC,UACVrC,EAASsC,gBAEb,yBAAKnC,UAAU,gBACb,yBAAKA,UAAU,qBACc,IAA1BwE,EAEG,kBAAC,EAAD,CACE3E,SAAUA,EACVQ,SAAUT,EAAOS,SACjBT,OAAQA,EACRE,4BAA6B,EAAKA,8BAIpC,kBAAC,EAAD,CACED,SAAUA,EACVD,OAAQA,EACRG,mBAAoBA,EACpBD,4BAA6B,EAAKA,wC,GA5CnC6B,IAAMC,WA8DZjC,gBAAU4E,G,eCtElB,SAASE,EAAiBC,EAAQhE,GAAQ,IACvC0C,EAAgC1C,EAAhC0C,MAAOU,EAAyBpD,EAAzBoD,QAASC,EAAgBrD,EAAhBqD,YAChBY,EAAqCD,EAArCC,YAAaC,EAAwBF,EAAxBE,OAAQ9B,EAAgB4B,EAAhB5B,YAEvB+B,EAAQnE,EAAMoD,QAAQc,EAAOnB,aAC7BqB,EAAaC,MAAMC,KAAKH,EAAMR,SACpCS,EAAWG,OAAOL,EAAOhC,MAAO,GAChCkC,EAAWG,OAAON,EAAY/B,MAAO,EAAGE,GAExC,IAAMoC,EAAS,2BACVL,GADU,IAEbR,QAASS,IAWX,MARiB,CACf1B,QACAU,QAAQ,2BACHA,GADE,kBAEJoB,EAAU7E,SAAW6E,IAExBnB,e,UCZEoB,E,4MACJC,UAAY,SAACV,GAAY,IAErBC,EAIED,EAJFC,YACAC,EAGEF,EAHFE,OACA9B,EAEE4B,EAFF5B,YACA3C,EACEuE,EADFvE,KALoB,EAalB,EAAKI,MAJP6C,EAToB,EASpBA,MACAU,EAVoB,EAUpBA,QACAC,EAXoB,EAWpBA,YACA5C,EAZoB,EAYpBA,SAGF,GAAoB,OAAhBwD,GAAmC,OAAXC,IAIxBD,EAAYlB,cAAgBmB,EAAOnB,aAAekB,EAAY/B,QAAUgC,EAAOhC,OAInF,GAAa,WAATzC,EAAJ,CAqBA,GAHc2D,EAAQc,EAAOnB,eACdK,EAAQa,EAAYlB,aAEb,CACpB,IAAM4B,EAAWZ,EAAiBC,EAAQ,CAAEtB,QAAOU,UAASC,gBAS5D,OARA5C,EAAS,CACPhB,KAAM,eACNyE,SACAD,cACA7B,qBAGF,EAAKjC,SAASwE,GAIhBlE,EAAS,CACPhB,KAAM,0BACNuE,WAEF,EAAK7D,SAAS,CACZwE,SAAU,cAvCZ,CACElE,EAAS,CACPhB,KAAM,UACN6E,KAAMJ,EAAOhC,MACb0C,GAAIX,EAAY/B,MAChBE,gBAGF,IAAMuC,EAAW,CACfjC,QACAU,UACAC,eAGF,EAAKlD,SAASwE,K,EA6BlBE,gBAAkB,WAAO,IAAD,EAGlB,EAAKhF,MADPY,EAFoB,EAEpBA,SAAU2C,EAFU,EAEVA,QAASC,EAFC,EAEDA,YAErB5C,EAAS,CAAEhB,KAAM,eACjB,EAAKU,SAAS,CACZiD,UACAC,iB,EAIJhE,mBAAqB,SAACM,GAAc,IAAD,EACH,EAAKE,MAA3BY,EADyB,EACzBA,SAAU2C,EADe,EACfA,QAClB3C,EAAS,CAAEhB,KAAM,gBAAiBE,aAClC,EAAKQ,SAAS,CACZiD,a,EAIJ0B,WAAa,WACX,IAAIA,EADa,EAEgB,EAAKjF,MAA9BuD,EAFS,EAETA,QAASC,EAFA,EAEAA,YAejB,OAbIA,IACFyB,EAAazB,EAAYV,KAAI,SAACiB,EAAQ1B,GACpC,IAAMhD,EAASkE,EAAQQ,GACvB,OACE,kBAAC,EAAD,CACEhB,IAAK1D,EAAOS,SACZuC,MAAOA,EACPhD,OAAQA,EACRG,mBAAoB,EAAKA,yBAK1ByF,G,uDAGC,IAAD,OACP,OACE,yBAAKxF,UAAU,OACb,kBAAC,IAAD,CAAiBoF,UAAW9D,KAAK8D,WAC/B,kBAAC,IAAD,CAAW3B,YAAY,cAActD,KAAK,SAASsF,UAAU,eAC1D,SAAC5F,GAAD,OACC,uCAAKG,UAAU,gBAAmBH,EAAS6D,eAA3C,CAA2DzB,IAAKpC,EAASqC,WACtE,EAAKsD,aACL3F,EAAS6B,YACV,4BAAQvB,KAAK,SAASC,QAAS,EAAKmF,gBAAiBvF,UAAU,kCAA/D,wB,GAnHE2B,IAAMC,WA+ITjC,mBARf,SAAyBe,GACvB,MAAO,CACL0C,MAAO1C,EAAMmD,KAAKT,MAClBU,QAASpD,EAAMmD,KAAKC,QACpBC,YAAarD,EAAMmD,KAAKE,eAIbpE,CAAyBwF,G,iCCrJzBO,I,2EAAf,8BAAAC,EAAA,sEACmBC,YAAO,kBAAmB,EAAG,CAC5CC,QAD4C,SACpCC,GACN,IAAMC,EAAQD,EAASE,kBAAkB,QACzCD,EAAME,YAAY,UAAW,YAC7BF,EAAME,YAAY,QAAS,aALjC,cACQC,EADR,gBAQ4BA,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAAQC,IAAI,SARxF,gDAQoG,GARpG,cAQQtC,EARR,eASQmC,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAAQE,IAAIvC,EAAa,SATjF,iCAUSmC,GAVT,6C,sBAaA,SAASK,EAAe1C,GACtB,IAD4B,EACtB2C,EAAM,GADgB,cAET3C,GAFS,IAE5B,2BAAyB,CAAC,IAAf4C,EAAc,QACvBD,EAAIC,EAAKpG,UAAYoG,GAHK,8BAK5B,OAAOD,EAGT,SAASE,EAAmBtD,GAC1B,IADiC,EAC3BoD,EAAM,GADqB,cAEdpD,GAFc,IAEjC,2BAA0B,CAAC,IAAhBqD,EAAe,QACxBD,EAAIC,EAAKzE,QAAUyE,GAHY,8BAKjC,OAAOD,EAGF,SAAeG,IAAtB,+B,4CAAO,sCAAAhB,EAAA,sEACYD,IADZ,cACCQ,EADD,OAECU,EAAQV,EAAGC,YAAY,OAAQ,YAAYC,YAAY,QAFxD,SAIiBQ,EAAMhE,MAAM,WAAWiE,SAJxC,cAIC/C,EAJD,gBAKe8C,EAAMhE,MAAM,SAASiE,SALpC,cAKCzD,EALD,iBAOqBwD,EAAMP,IAAI,SAP/B,eAOCtC,EAPD,OAQCF,EAAO,CACXT,MAAOsD,EAAmBtD,GAC1BU,QAASyC,EAAezC,GACxBC,eAXG,kBAcEF,GAdF,6C,kEAiBA,WAA2BjE,GAA3B,mBAAA+F,EAAA,sEACYD,IADZ,cACCQ,EADD,OAECU,EAAQV,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAFzD,SAGqBQ,EAAMP,IAAI,SAH/B,gDAG2C,GAH3C,cAGCtC,EAHD,MAIO+C,KAAKlH,EAAOS,UAJnB,UAMCuG,EAAMN,IAAIvC,EAAa,SANxB,yBAOC6C,EAAMG,IAAInH,EAAQA,EAAOS,UAP1B,6C,kEAUA,WAA8BA,EAAU2G,GAAxC,mCAAArB,EAAA,sEACYD,IADZ,cACCQ,EADD,OAECU,EAAQV,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAFzD,SAIgBQ,EAAMP,IAAIhG,GAJ1B,OAICT,EAJD,wCAMoBA,EAAOyE,SAN3B,mIAMYvC,EANZ,YAOG8E,EAAMK,OAAOnF,GAPhB,mUAUC8E,EAAMK,OAAO5G,GAVd,yBAWqBuG,EAAMP,IAAI,SAX/B,eAWCtC,EAXD,QAYOkB,OAAO+B,EAAkB,GAZhC,UAaCJ,EAAMN,IAAIvC,EAAa,SAbxB,yBAcC6C,EAAMK,OAAO5G,GAdd,6E,kEAiBA,WAAwB6G,GAAxB,iBAAAvB,EAAA,sEACYD,IADZ,cACCQ,EADD,OAECU,EAAQV,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAFzD,SAGCQ,EAAMN,IAAIY,EAAgB,SAH3B,4C,kEAMA,WAAgC7G,EAAUgB,GAA1C,mBAAAsE,EAAA,sEACYD,IADZ,cACCQ,EADD,OAECU,EAAQV,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAFzD,SAGgBQ,EAAMP,IAAIhG,GAH1B,cAGCT,EAHD,QAIEM,MAAQmB,EAJV,UAKCuF,EAAMN,IAAI1G,EAAQS,GALnB,6C,kEAQA,WAAyBA,EAAUyB,GAAnC,mBAAA6D,EAAA,sEACYD,IADZ,cACCQ,EADD,OAECU,EAAQV,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAFzD,SAGCQ,EAAMG,IAAIjF,EAAMA,EAAKE,QAHtB,uBAIgB4E,EAAMP,IAAIhG,GAJ1B,cAICT,EAJD,QAKEyE,QAAQyC,KAAKhF,EAAKE,QALpB,UAMC4E,EAAMN,IAAI1G,EAAQS,GANnB,6C,kEASA,WAA4BA,EAAU2B,EAAQmF,GAA9C,mBAAAxB,EAAA,sEACYD,IADZ,cACCQ,EADD,OAECU,EAAQV,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAFzD,SAGgBQ,EAAMP,IAAIhG,GAH1B,cAGCT,EAHD,QAIEyE,QAAQY,OAAOkC,EAAU,GAJ3B,UAKCP,EAAMN,IAAI1G,EAAQS,GALnB,yBAMCuG,EAAMK,OAAOjF,GANd,6C,kEASA,WAA4BkD,GAA5B,iBAAAS,EAAA,sEACYD,IADZ,cACCQ,EADD,OAECU,EAAQV,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAFzD,SAGCQ,EAAMN,IAAIpB,EAAWA,EAAU7E,UAHhC,4C,kEAMA,WAAqC+G,EAAUC,GAA/C,iBAAA1B,EAAA,sEACYD,IADZ,cACCQ,EADD,OAECU,EAAQV,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAFzD,SAICQ,EAAMN,IAAIc,EAAUA,EAAS/G,UAJ9B,uBAKCuG,EAAMN,IAAIe,EAAWA,EAAUhH,UALhC,4C,kEAQA,WAA8Be,EAAIC,GAAlC,mBAAAsE,EAAA,sEACYD,IADZ,cACCQ,EADD,OAECU,EAAQV,EAAGC,YAAY,OAAQ,aAAaC,YAAY,QAFzD,SAGcQ,EAAMP,IAAIjF,GAHxB,cAGCU,EAHD,QAIAM,QAAUf,EAJV,UAKCuF,EAAMN,IAAIxE,EAAMV,GALjB,6C,sBCpGP,SAASkG,EAAU5G,GACjB,IAAM2E,EAAQ,eAAQ3E,GAChBL,EAAQ,iBAAakH,KAAKC,MAAsB,IAAhBD,KAAKE,WAErCvC,EAAY,CAChB7E,WACAH,MAAO,GACPmE,QAAS,IAQX,OAxBF,SAAkBP,GAChB,IAAK,IAAMR,KAAOQ,EAChB,GAAkC,IAA9BA,EAAQR,GAAKpD,MAAMU,OACrB,OAAO,EAGX,OAAO,EAaH8G,CAASrC,EAASvB,YDiBjB,SAAP,2BChBI6D,CAAYzC,GACZG,EAASvB,QAAQzD,GAAY6E,EAC7BG,EAAStB,YAAY+C,KAAKzG,IAErBgF,EAGT,SAASuC,GAAOlH,EAAOsE,EAAMM,EAAIxC,GAC/B,IAAMuC,EAAQ,eAAQ3E,GAItB,OAHA2E,EAAStB,YAAYkB,OAAOD,EAAM,GAClCK,EAAStB,YAAYkB,OAAOK,EAAI,EAAGxC,GDiC9B,SAAP,2BChCE+E,CAASxC,EAAStB,aACXsB,EAGT,SAASyC,GAAepH,EAAOL,EAAUgB,GACvC,IAAMgE,EAAQ,eAAQ3E,GAGtB,OAFA2E,EAASvB,QAAQzD,GAAUH,MAAQmB,EDgC9B,SAAP,6BC/BE0G,CAAiB1H,EAAUgB,GACpBgE,EAGT,SAAS2C,GAAatH,EAAOL,GAC3B,IAAMgF,EAAQ,eAAQ3E,GAKtB,ODFK,SAAP,6BCDEuH,CAAe5H,EAAUgF,EAAStB,YAAYmE,QAAQ7H,WAC/CgF,EAASvB,QAAQzD,GACxBgF,EAAStB,YAAYkB,OAAOI,EAAStB,YAAYmE,QAAQ7H,GAAW,GAC7DgF,EAeT,SAAS8C,GAAQzH,EAAOL,GACtB,IAAMgF,EAAQ,eAAQ3E,GAChBsB,EAAM,eAAWuF,KAAKC,MAAsB,IAAhBD,KAAKE,WACjCW,EAAU,CACdpG,SACAI,QAAS,IASX,OA1BF,SAAsBgB,EAAOxD,GAC3B,IADmC,EAG7ByI,EAAczI,EAAOyE,QAHQ,cAIhBgE,GAJgB,IAInC,2BAAgC,CAC9B,GAA4B,KAAxBjF,EAD0B,SACdhB,QACd,OAAO,GANwB,8BASnC,OARY,EAmBRkG,CAAa5H,EAAM0C,MAAO1C,EAAMoD,QAAQzD,ODMvC,SAAP,6BCLIkI,CAAUlI,EAAU+H,GACpB/C,EAASjC,MAAMpB,GAAUoG,EACzB/C,EAASvB,QAAQzD,GAAUgE,QAAQyC,KAAK9E,IAGnCqD,EAGT,SAASmD,GAAW9H,EAAOL,EAAU2B,GACnC,IAAMqD,EAAQ,eAAQ3E,GAChByG,EAAW9B,EAASvB,QAAQzD,GAAUgE,QAAQ6D,QAAQlG,GAK5D,OAJAqD,EAASvB,QAAQzD,GAAUgE,QAAQY,OAAOkC,EAAU,UAC7C9B,EAASjC,MAAMpB,GDEjB,SAAP,+BCAEyG,CAAapI,EAAU2B,EAAQmF,GACxB9B,EAGT,SAASqD,GAAWhI,EAAOkE,EAAQD,EAAa7B,GAC9C,IAAM+B,EAAQnE,EAAMoD,QAAQc,EAAOnB,aAGnC,GAAIoB,IAFWnE,EAAMoD,QAAQa,EAAYlB,aAEnB,CACpB,IAAMqB,EAAaC,MAAMC,KAAKH,EAAMR,SACpCS,EAAWG,OAAOL,EAAOhC,MAAO,GAChCkC,EAAWG,OAAON,EAAY/B,MAAO,EAAGE,GAExC,IAAMoC,EAAS,2BACVL,GADU,IAEbR,QAASS,IAGLO,EAAQ,2BACT3E,GADS,IAEZoD,QAAQ,2BACHpD,EAAMoD,SADJ,kBAEJoB,EAAU7E,SAAW6E,MAK1B,ODlBG,SAAP,2BCiBIyD,CAAazD,GACNG,EAET,OAAO3E,EAGT,SAASkI,GAAoBlI,EAAOgE,GAAS,IAAD,EAClCE,EAAqCF,EAArCE,OAAQD,EAA6BD,EAA7BC,YAAa7B,EAAgB4B,EAAhB5B,YACrBgB,EAAgCpD,EAAhCoD,QAASV,EAAuB1C,EAAvB0C,MAAOW,EAAgBrD,EAAhBqD,YAElBc,EAAQf,EAAQc,EAAOnB,aACvBoF,EAAS/E,EAAQa,EAAYlB,aAE7BqF,EAAe/D,MAAMC,KAAKH,EAAMR,SACtCyE,EAAa7D,OAAOL,EAAOhC,MAAO,GAElC,IAAMwE,EAAQ,2BACTvC,GADS,IAEZR,QAASyE,IAGLC,EAAgBhE,MAAMC,KAAK6D,EAAOxE,SACxC0E,EAAc9D,OAAON,EAAY/B,MAAO,EAAGE,GAE3C,IAAMuE,EAAS,2BACVwB,GADU,IAEbxE,QAAS0E,IAGL1D,EAAW,CACfjC,QACAU,QAAQ,2BACHA,GADE,uBAEJsD,EAAS/G,SAAW+G,GAFhB,cAGJC,EAAUhH,SAAWgH,GAHjB,IAKPtD,eAIF,ODnDK,SAAP,6BCkDEiF,CAAsB5B,EAAUC,GACzBhC,EAGT,SAAS4D,GAAavI,EAAOU,EAAIC,GAC/B,IAAMgE,EAAQ,eAAQ3E,GAGtB,OAFA2E,EAASjC,MAAMhC,GAAIgB,QAAUf,EDhDxB,SAAP,6BCiDE6H,CAAe9H,EAAIC,GACZgE,EAGM,SAAS8D,GAAWzI,EAAO0I,GACxC,OAAQA,EAAOjJ,MACb,IAAK,aAAc,MAAO,CACxB0D,KAAMyD,EAAU5G,EAAMmD,OAExB,IAAK,WAAY,MAAO,CACtBA,KAAMsE,GAAQzH,EAAMmD,KAAMuF,EAAO/I,WAEnC,IAAK,gBAAiB,MAAO,CAC3BwD,KAAMmE,GAAatH,EAAMmD,KAAMuF,EAAO/I,WAExC,IAAK,cAAe,MAAO,CACzBwD,KAAM2E,GAAW9H,EAAMmD,KAAMuF,EAAO/I,SAAU+I,EAAOpH,SAEvD,IAAK,UAAW,MAAO,CACrB6B,KAAM+D,GAAOlH,EAAMmD,KAAMuF,EAAOpE,KAAMoE,EAAO9D,GAAI8D,EAAOtG,cAE1D,IAAK,eAAgB,MAAO,CAC1Be,KAAM6E,GAAWhI,EAAMmD,KAAMuF,EAAOxE,OAAQwE,EAAOzE,YAAayE,EAAOtG,cAEzE,IAAK,0BAA2B,MAAO,CACrCe,KAAM+E,GAAoBlI,EAAMmD,KAAMuF,EAAO1E,SAE/C,IAAK,mBAAoB,MAAO,CAC9Bb,KAAMiE,GAAepH,EAAMmD,KAAMuF,EAAOhI,GAAIgI,EAAO/H,WAErD,IAAK,iBAAkB,MAAO,CAC5BwC,KAAMoF,GAAavI,EAAMmD,KAAMuF,EAAOhI,GAAIgI,EAAO/H,WAEnD,QAAS,OAAOX,IChMnB,+BAAAiF,EAAA,wCAAAA,EAAA,sEACkBgB,IADlB,OACOT,EADP,OAGOM,EAAM,CACV3C,KAAMqC,GAGFU,EAAQyC,YAAYF,GAAY3C,GAEhC8C,EACJ,kBAAC,IAAD,CAAU1C,MAAOA,GACf,kBAAC,EAAD,OAIJ2C,IAASC,OACPF,EACAG,SAASC,eAAe,SAjB3B,oG","file":"static/js/main.a6b153e8.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport './ColumnSettings.scss';\nimport PropTypes from 'prop-types';\n\nconst ColumnSettings = ({\n  column,\n  provided,\n  handleSettingsColumnClicked,\n  handleDeleteColumn,\n}) => (\n  <div className=\"column-settings\">\n    <div className=\"column-title-and-close\">\n      <h3 {...provided.dragHandleProps} className=\"column-settings-title\">\n        {column.title}\n        {' '}\n        settings\n      </h3>\n      <button type=\"button\" onClick={handleSettingsColumnClicked} className=\"column-settings-close-button\">\n        <i className=\"fas fa-times\" />\n      </button>\n    </div>\n    <div className=\"column-settings-parameters\">\n      <button type=\"button\" onClick={() => handleDeleteColumn(column.columnId)} className=\"column-settings-parameters-delete\">\n        Delete\n        column\n      </button>\n    </div>\n  </div>\n);\n\nColumnSettings.propTypes = {\n  provided: PropTypes.object.isRequired,\n  column: PropTypes.shape({\n    cardIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n    title: PropTypes.string.isRequired,\n    columnId: PropTypes.string.isRequired,\n  }),\n  handleSettingsColumnClicked: PropTypes.func.isRequired,\n  handleDeleteColumn: PropTypes.func.isRequired,\n};\n\nexport default connect()(ColumnSettings);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './ColumnInput.scss';\n\nclass ColumnInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: '',\n    };\n  }\n\n  handleChange = (event) => {\n    const { input } = this.state;\n    if (input.length < 40) {\n      this.setState({\n        input: event.target.value,\n      });\n    }\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { handleEditingColumnTitle, dispatch, column } = this.props;\n    const { input } = this.state;\n\n    handleEditingColumnTitle(false);\n    if (input !== '') {\n      dispatch({ type: 'SET_COLUMN_TITLE', id: column.columnId, newTitle: input });\n    }\n  }\n\n  render() {\n    const { provided, column, children } = this.props;\n    const { input } = this.state;\n    return (\n      <>\n        <form onSubmit={this.handleSubmit} {...provided.dragHandleProps} className=\"column-form\">\n          <input\n            type=\"text\"\n            onChange={this.handleChange}\n            value={input}\n            className=\"column-form-input\"\n            placeholder={column.title === '' ? 'New Title' : column.title}\n          />\n          <button type=\"submit\" className=\"column-form-button\"><i className=\"fas fa-check\" /></button>\n        </form>\n        {children}\n      </>\n    );\n  }\n}\n\nColumnInput.propTypes = {\n  handleEditingColumnTitle: PropTypes.func.isRequired,\n  provided: PropTypes.object.isRequired,\n  column: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(ColumnInput);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './CardInput.scss';\n\nclass CardInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: '',\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      input: event.target.value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    const { input } = this.state;\n    const { dispatch, card, handleEditCard } = this.props;\n    if (input.length > 0) {\n      dispatch({\n        type: 'SET_CARD_TITLE',\n        id: card.cardId,\n        newTitle: input,\n      });\n\n      this.setState({\n        input,\n      });\n    }\n    handleEditCard(false);\n    event.preventDefault();\n  }\n\n  render() {\n    const { provided, card } = this.props;\n    const { input } = this.state;\n    return (\n      <div\n        ref={provided.innerRef}\n        {...provided.dragHandleProps}\n        {...provided.draggableProps}\n        className=\"card\"\n      >\n        <form className=\"card-form\" onSubmit={this.handleSubmit}>\n          <input\n            className=\"card-form-input\"\n            type=\"text\"\n            value={input}\n            onChange={this.handleChange}\n            placeholder={card.content === '' ? 'new card Title' : card.content}\n          />\n          <button type=\"submit\" className=\"card-form-button\"><i className=\"fas fa-check\" /></button>\n        </form>\n      </div>\n    );\n  }\n}\n\nCardInput.propTypes = {\n  card: PropTypes.object.isRequired,\n  provided: PropTypes.object.isRequired,\n  handleEditCard: PropTypes.func.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nexport default connect()(CardInput);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\nimport CardInput from './cardInput/CardInput';\nimport './Card.scss';\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mouseOn: true,\n      formOrTitle: true,\n    };\n  }\n\n  handleMouseOver = () => {\n    this.setState({\n      mouseOn: false,\n    });\n  }\n\n  handleMouseOut = () => {\n    this.setState({\n      mouseOn: true,\n    });\n  }\n\n  handleEditCard = (isClicked) => {\n    this.setState({\n      formOrTitle: !isClicked,\n    });\n  }\n\n  handleInputOrTitle = () => {\n    const { card } = this.props;\n    const { formOrTitle } = this.state;\n\n    if (card.content !== '') {\n      if (formOrTitle === false) {\n        return false;\n      }\n      return true;\n    }\n\n    if (card.content === '') {\n      if (formOrTitle === true) {\n        return false;\n      }\n      return true;\n    }\n  }\n\n  render() {\n    const { card, index, handleDeleteCard } = this.props;\n    const { mouseOn } = this.state;\n    return (\n      <Draggable draggableId={card.cardId} index={index}>\n        {(provided) => (\n          <div>\n            {this.handleInputOrTitle() ? (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                className=\"card\"\n                onMouseOver={this.handleMouseOver}\n                onMouseOut={this.handleMouseOut}\n              >\n                <p>{card.content}</p>\n                <div className=\"card-buttons\">\n                  <button\n                    type=\"button\"\n                    onClick={() => this.handleEditCard(true)}\n                    className=\"card-btn\"\n                    hidden={mouseOn}\n                  >\n                    <i className=\"fas fa-edit\" />\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => handleDeleteCard(card.cardId)}\n                    className=\"card-btn\"\n                    hidden={mouseOn}\n                  >\n                    <i className=\"fas fa-trash-alt\" />\n                  </button>\n                </div>\n              </div>\n            ) : <CardInput provided={provided} card={card} handleEditCard={this.handleEditCard} />}\n          </div>\n        )}\n      </Draggable>\n    );\n  }\n}\n\nCard.propTypes = {\n  card: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  handleDeleteCard: PropTypes.func.isRequired,\n};\n\nexport default connect()(Card);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Droppable } from 'react-beautiful-dnd';\nimport PropTypes from 'prop-types';\nimport Card from '../../card/Card';\nimport './ColumnCardList.scss';\n\nclass ColumnCardList extends React.Component {\n  getCards = (cards) => cards.map((card, index) => {\n    const { column, handleDeleteCard } = this.props;\n    return (\n      <Card\n        key={card.cardId}\n        column={column}\n        card={card}\n        index={index}\n        handleDeleteCard={handleDeleteCard}\n      />\n    );\n  })\n\n  render() {\n    const { column, cardList, handleAddCard } = this.props;\n    return (\n      <div className=\"column-card-list\">\n        <Droppable droppableId={column.columnId} type=\"cards\">\n          {(provided) => (\n            <>\n              <div\n                ref={provided.innerRef}\n                {...provided.droppableProps}\n                className=\"column-card-list-inner\"\n                style={cardList.length === 0 ? { height: '50px' } : null}\n              >\n                {this.getCards(cardList)}\n                {provided.placeholder}\n              </div>\n              <button type=\"button\" className=\"column-main-add-card-button\" onClick={handleAddCard}>Add Card</button>\n            </>\n          )}\n        </Droppable>\n      </div>\n    );\n  }\n}\n\nColumnCardList.propTypes = {\n  column: PropTypes.object.isRequired,\n  cardList: PropTypes.array.isRequired,\n  handleAddCard: PropTypes.func.isRequired,\n  handleDeleteCard: PropTypes.func.isRequired,\n  columns: PropTypes.object.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    cards: state.data.cards,\n    columns: state.data.columns,\n    columnOrder: state.data.columnOrder,\n  };\n}\n\nexport default connect(mapStateToProps)(ColumnCardList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ColumnInput from '../columnInput/ColumnInput';\nimport ColumnCardList from '../columnCardList/ColumnCardList';\nimport './ColumnMain.scss';\n\nclass ColumnMain extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      editingColumnTitle: true,\n    };\n  }\n\n  handleEditingColumnTitle = (isClicked) => {\n    this.setState({\n      editingColumnTitle: !isClicked,\n    });\n  }\n\n  inputOrTitle = () => {\n    const { column } = this.props;\n    const { editingColumnTitle } = this.state;\n    if (column.title !== '') {\n      if (editingColumnTitle === true) {\n        return false;\n      }\n      return true;\n    }\n\n    if (column.title === '') {\n      if (editingColumnTitle === true) {\n        return true;\n      }\n      return false;\n    }\n  }\n\n  handleAddCard = () => {\n    const { dispatch, cards, column } = this.props;\n    dispatch({ type: 'ADD_CARD', columnId: column.columnId });\n    this.setState({\n      cards,\n    });\n  }\n\n  handleDeleteCard = (cardId) => {\n    const { dispatch, column } = this.props;\n    dispatch({\n      type: 'DELETE_CARD',\n      columnId: column.columnId,\n      cardId,\n    });\n    this.setState({\n      currentCard: 'deleted',\n    });\n  }\n\n  handleGetCards = () => {\n    const { column, cards } = this.props;\n    return column.cardIds.map((elemId) => cards[elemId]);\n  }\n\n  render() {\n    const { column, provided, handleSettingsColumnClicked } = this.props;\n    return (\n      <>\n        {this.inputOrTitle() ? (\n          <ColumnInput\n            provided={provided}\n            handleEditingColumnTitle={this.handleEditingColumnTitle}\n            column={column}\n          >\n            <ColumnCardList\n              cardList={this.handleGetCards()}\n              handleAddCard={this.handleAddCard}\n              handleDeleteCard={this.handleDeleteCard}\n              column={column}\n            />\n          </ColumnInput>\n        )\n          : (\n            <>\n              <div className=\"column-main\" {...provided.dragHandleProps}>\n                <h3\n                  className=\"column-title\"\n                  onClick={() => this.handleEditingColumnTitle(true)}\n                >\n                  {column.title}\n                </h3>\n                <button\n                  type=\"button\"\n                  onClick={handleSettingsColumnClicked}\n                  className=\"column-settings-button\"\n                >\n                  <i className=\"fas fa-ellipsis-v\" />\n                </button>\n              </div>\n              <ColumnCardList\n                cardList={this.handleGetCards()}\n                handleAddCard={this.handleAddCard}\n                handleDeleteCard={this.handleDeleteCard}\n                column={column}\n              />\n            </>\n          )}\n      </>\n    );\n  }\n}\n\nColumnMain.propTypes = {\n  column: PropTypes.shape({\n    cardIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n    title: PropTypes.string.isRequired,\n    columnId: PropTypes.string.isRequired,\n  }),\n  handleSettingsColumnClicked: PropTypes.func.isRequired,\n  provided: PropTypes.object.isRequired,\n  dispatch: PropTypes.func.isRequired,\n  cards: PropTypes.objectOf(PropTypes.shape({\n    cardId: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n  })),\n};\n\nfunction mapStateToProps(state) {\n  return {\n    cards: state.data.cards,\n  };\n}\n\nexport default connect(mapStateToProps)(ColumnMain);\n","import React from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './Column.scss';\nimport ColumnSettings from './columnSettings/ColumnSettings';\nimport ColumnMain from './columnMain/ColumnMain';\n\nclass Column extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      settingsColumnClicked: false,\n    };\n  }\n\n  handleSettingsColumnClicked = () => {\n    this.setState({\n      settingsColumnClicked: !this.state.settingsColumnClicked,\n    });\n  }\n\n  render() {\n    const {\n      column, index, handleDeleteColumn,\n    } = this.props;\n    const { settingsColumnClicked } = this.state;\n    return (\n      <Draggable draggableId={column.columnId} index={index}>\n        {(provided) => (\n          <div\n            className=\"column\"\n            ref={provided.innerRef}\n            {...provided.draggableProps}\n          >\n            <div className=\"column-inner\">\n              <div className=\"column-inner-all\">\n                {settingsColumnClicked === false\n                  ? (\n                    <ColumnMain\n                      provided={provided}\n                      columnId={column.columnId}\n                      column={column}\n                      handleSettingsColumnClicked={this.handleSettingsColumnClicked}\n                    />\n                  )\n                  : (\n                    <ColumnSettings\n                      provided={provided}\n                      column={column}\n                      handleDeleteColumn={handleDeleteColumn}\n                      handleSettingsColumnClicked={this.handleSettingsColumnClicked}\n                    />\n                  )}\n              </div>\n            </div>\n          </div>\n        )}\n      </Draggable>\n    );\n  }\n}\n\nColumn.propTypes = {\n  column: PropTypes.object.isRequired,\n  index: PropTypes.number.isRequired,\n  handleDeleteColumn: PropTypes.func.isRequired,\n};\n\nexport default connect()(Column);\n","export function moveCardInColumn(result, state) {\n  const { cards, columns, columnOrder } = state;\n  const { destination, source, draggableId } = result;\n\n  const start = state.columns[source.droppableId];\n  const newCardIds = Array.from(start.cardIds);\n  newCardIds.splice(source.index, 1);\n  newCardIds.splice(destination.index, 0, draggableId);\n\n  const newColumn = {\n    ...start,\n    cardIds: newCardIds,\n  };\n\n  const newState = {\n    cards,\n    columns: {\n      ...columns,\n      [newColumn.columnId]: newColumn,\n    },\n    columnOrder,\n  };\n  return newState;\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport PropTypes from 'prop-types';\nimport Column from './components/column/Column';\nimport { moveCardInColumn } from './utilities/dndMoves/dndMoves';\nimport './App.scss';\n\nclass App extends React.Component {\n  onDragEnd = (result) => {\n    const {\n      destination,\n      source,\n      draggableId,\n      type,\n    } = result;\n\n    const {\n      cards,\n      columns,\n      columnOrder,\n      dispatch,\n    } = this.props;\n\n    if (destination === null || source === null) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    if (type === 'column') {\n      dispatch({\n        type: 'MOVE_TO',\n        from: source.index,\n        to: destination.index,\n        draggableId,\n      });\n\n      const newState = {\n        cards,\n        columns,\n        columnOrder,\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    const start = columns[source.droppableId];\n    const finish = columns[destination.droppableId];\n\n    if (start === finish) {\n      const newState = moveCardInColumn(result, { cards, columns, columnOrder });\n      dispatch({\n        type: 'MOVE_TO_CARD',\n        source,\n        destination,\n        draggableId,\n      });\n\n      this.setState(newState);\n      return;\n    }\n\n    dispatch({\n      type: 'MOVE_CARD_TO_NEW_COLUMN',\n      result,\n    });\n    this.setState({\n      newState: 'ready',\n    });\n  }\n\n  handleAddColumn = () => {\n    const {\n      dispatch, columns, columnOrder,\n    } = this.props;\n    dispatch({ type: 'ADD_COLUMN' });\n    this.setState({\n      columns,\n      columnOrder,\n    });\n  }\n\n  handleDeleteColumn = (columnId) => {\n    const { dispatch, columns } = this.props;\n    dispatch({ type: 'DELETE_COLUMN', columnId });\n    this.setState({\n      columns,\n    });\n  }\n\n  columnList = () => {\n    let columnList;\n    const { columns, columnOrder } = this.props;\n\n    if (columnOrder) {\n      columnList = columnOrder.map((elemId, index) => {\n        const column = columns[elemId];\n        return (\n          <Column\n            key={column.columnId}\n            index={index}\n            column={column}\n            handleDeleteColumn={this.handleDeleteColumn}\n          />\n        );\n      });\n    }\n    return columnList;\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <Droppable droppableId=\"all-Columns\" type=\"column\" direction=\"horizontal\">\n            {(provided) => (\n              <div className=\"kanban-board\" {...provided.droppableProps} ref={provided.innerRef}>\n                {this.columnList()}\n                {provided.placeholder}\n                <button type=\"button\" onClick={this.handleAddColumn} className=\"kanban-board-add-column-button\">\n                  Add\n                  Column\n                </button>\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nApp.propTypes = {\n  cards: PropTypes.object.isRequired,\n  columns: PropTypes.object.isRequired,\n  columnOrder: PropTypes.array.isRequired,\n  dispatch: PropTypes.func.isRequired,\n};\n\nfunction mapStateToProps(state) {\n  return {\n    cards: state.data.cards,\n    columns: state.data.columns,\n    columnOrder: state.data.columnOrder,\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n","import { openDB } from 'idb';\n\nasync function connectDB() {\n  const db = await openDB('kanban-board-db', 1, {\n    upgrade(database) {\n      const dBase = database.createObjectStore('data');\n      dBase.createIndex('columns', 'columnId');\n      dBase.createIndex('cards', 'cardId');\n    },\n  });\n  const columnOrder = await db.transaction('data', 'readwrite').objectStore('data').get('order') || [];\n  await db.transaction('data', 'readwrite').objectStore('data').put(columnOrder, 'order');\n  return db;\n}\n\nfunction fromArrayToObj(data) {\n  const obj = {};\n  for (const elem of data) {\n    obj[elem.columnId] = elem;\n  }\n  return obj;\n}\n\nfunction fromArrayCardToObj(cards) {\n  const obj = {};\n  for (const elem of cards) {\n    obj[elem.cardId] = elem;\n  }\n  return obj;\n}\n\nexport async function getAllData() {\n  const db = await connectDB();\n  const store = db.transaction('data', 'readonly').objectStore('data');\n\n  const columns = await store.index('columns').getAll();\n  const cards = await store.index('cards').getAll();\n\n  const columnOrder = await store.get('order');\n  const data = {\n    cards: fromArrayCardToObj(cards),\n    columns: fromArrayToObj(columns),\n    columnOrder,\n  };\n\n  return data;\n}\n\nexport async function addColumnDB(column) {\n  const db = await connectDB();\n  const store = db.transaction('data', 'readwrite').objectStore('data');\n  const columnOrder = await store.get('order') || [];\n  columnOrder.push(column.columnId);\n\n  await store.put(columnOrder, 'order');\n  await store.add(column, column.columnId);\n}\n\nexport async function deleteColumnDB(columnId, columnOrderIndex) {\n  const db = await connectDB();\n  const store = db.transaction('data', 'readwrite').objectStore('data');\n\n  const column = await store.get(columnId);\n\n  for await (const card of column.cardIds) {\n    await store.delete(card);\n  }\n\n  await store.delete(columnId);\n  const columnOrder = await store.get('order');\n  columnOrder.splice(columnOrderIndex, 1);\n  await store.put(columnOrder, 'order');\n  await store.delete(columnId);\n}\n\nexport async function moveToDB(newColumnOrder) {\n  const db = await connectDB();\n  const store = db.transaction('data', 'readwrite').objectStore('data');\n  await store.put(newColumnOrder, 'order');\n}\n\nexport async function setColumnTitleDB(columnId, newTitle) {\n  const db = await connectDB();\n  const store = db.transaction('data', 'readwrite').objectStore('data');\n  const column = await store.get(columnId);\n  column.title = newTitle;\n  await store.put(column, columnId);\n}\n\nexport async function addCardDB(columnId, card) {\n  const db = await connectDB();\n  const store = db.transaction('data', 'readwrite').objectStore('data');\n  await store.add(card, card.cardId);\n  const column = await store.get(columnId);\n  column.cardIds.push(card.cardId);\n  await store.put(column, columnId);\n}\n\nexport async function deleteCardDB(columnId, cardId, position) {\n  const db = await connectDB();\n  const store = db.transaction('data', 'readwrite').objectStore('data');\n  const column = await store.get(columnId);\n  column.cardIds.splice(position, 1);\n  await store.put(column, columnId);\n  await store.delete(cardId);\n}\n\nexport async function moveCardToDB(newColumn) {\n  const db = await connectDB();\n  const store = db.transaction('data', 'readwrite').objectStore('data');\n  await store.put(newColumn, newColumn.columnId);\n}\n\nexport async function moveCardToNewColumnDB(newStart, newFinish) {\n  const db = await connectDB();\n  const store = db.transaction('data', 'readwrite').objectStore('data');\n\n  await store.put(newStart, newStart.columnId);\n  await store.put(newFinish, newFinish.columnId);\n}\n\nexport async function setCardTitleDB(id, newTitle) {\n  const db = await connectDB();\n  const store = db.transaction('data', 'readwrite').objectStore('data');\n  const card = await store.get(id);\n  card.content = newTitle;\n  await store.put(card, id);\n}\n","import {\n  addColumnDB,\n  deleteColumnDB,\n  moveToDB,\n  setColumnTitleDB,\n  addCardDB,\n  deleteCardDB,\n  moveCardToDB,\n  moveCardToNewColumnDB,\n  setCardTitleDB,\n} from '../../db/DB';\n\nfunction hasTitle(columns) {\n  for (const key in columns) {\n    if (columns[key].title.length === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction addColumn(state) {\n  const newState = { ...state };\n  const columnId = `column-${Math.floor(Math.random() * 1000000)}`;\n\n  const newColumn = {\n    columnId,\n    title: '',\n    cardIds: [],\n  };\n\n  if (hasTitle(newState.columns)) {\n    addColumnDB(newColumn);\n    newState.columns[columnId] = newColumn;\n    newState.columnOrder.push(columnId);\n  }\n  return newState;\n}\n\nfunction moveTo(state, from, to, draggableId) {\n  const newState = { ...state };\n  newState.columnOrder.splice(from, 1);\n  newState.columnOrder.splice(to, 0, draggableId);\n  moveToDB(newState.columnOrder);\n  return newState;\n}\n\nfunction setColumnTitle(state, columnId, newTitle) {\n  const newState = { ...state };\n  newState.columns[columnId].title = newTitle;\n  setColumnTitleDB(columnId, newTitle);\n  return newState;\n}\n\nfunction deleteColumn(state, columnId) {\n  const newState = { ...state };\n\n  deleteColumnDB(columnId, newState.columnOrder.indexOf(columnId));\n  delete newState.columns[columnId];\n  newState.columnOrder.splice(newState.columnOrder.indexOf(columnId), 1);\n  return newState;\n}\n\nfunction hasCardTitle(cards, column) {\n  const has = true;\n\n  const columnCards = column.cardIds;\n  for (const elem of columnCards) {\n    if (cards[elem].content === '') {\n      return false;\n    }\n  }\n  return has;\n}\n\nfunction addCard(state, columnId) {\n  const newState = { ...state };\n  const cardId = `card-${Math.floor(Math.random() * 1000000)}`;\n  const newCard = {\n    cardId,\n    content: '',\n  };\n\n  if (hasCardTitle(state.cards, state.columns[columnId])) {\n    addCardDB(columnId, newCard);\n    newState.cards[cardId] = newCard;\n    newState.columns[columnId].cardIds.push(cardId);\n  }\n\n  return newState;\n}\n\nfunction deleteCard(state, columnId, cardId) {\n  const newState = { ...state };\n  const position = newState.columns[columnId].cardIds.indexOf(cardId);\n  newState.columns[columnId].cardIds.splice(position, 1);\n  delete newState.cards[cardId];\n\n  deleteCardDB(columnId, cardId, position);\n  return newState;\n}\n\nfunction moveToCard(state, source, destination, draggableId) {\n  const start = state.columns[source.droppableId];\n  const finish = state.columns[destination.droppableId];\n\n  if (start === finish) {\n    const newCardIds = Array.from(start.cardIds);\n    newCardIds.splice(source.index, 1);\n    newCardIds.splice(destination.index, 0, draggableId);\n\n    const newColumn = {\n      ...start,\n      cardIds: newCardIds,\n    };\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newColumn.columnId]: newColumn,\n      },\n    };\n\n    moveCardToDB(newColumn);\n    return newState;\n  }\n  return state;\n}\n\nfunction moveCardToNewColumn(state, result) {\n  const { source, destination, draggableId } = result;\n  const { columns, cards, columnOrder } = state;\n\n  const start = columns[source.droppableId];\n  const finish = columns[destination.droppableId];\n\n  const startCardIds = Array.from(start.cardIds);\n  startCardIds.splice(source.index, 1);\n\n  const newStart = {\n    ...start,\n    cardIds: startCardIds,\n  };\n\n  const finishCardIds = Array.from(finish.cardIds);\n  finishCardIds.splice(destination.index, 0, draggableId);\n\n  const newFinish = {\n    ...finish,\n    cardIds: finishCardIds,\n  };\n\n  const newState = {\n    cards,\n    columns: {\n      ...columns,\n      [newStart.columnId]: newStart,\n      [newFinish.columnId]: newFinish,\n    },\n    columnOrder,\n  };\n\n  moveCardToNewColumnDB(newStart, newFinish);\n  return newState;\n}\n\nfunction setCardTitle(state, id, newTitle) {\n  const newState = { ...state };\n  newState.cards[id].content = newTitle;\n  setCardTitleDB(id, newTitle);\n  return newState;\n}\n\nexport default function appReducer(state, action) {\n  switch (action.type) {\n    case 'ADD_COLUMN': return {\n      data: addColumn(state.data),\n    };\n    case 'ADD_CARD': return {\n      data: addCard(state.data, action.columnId),\n    };\n    case 'DELETE_COLUMN': return {\n      data: deleteColumn(state.data, action.columnId),\n    };\n    case 'DELETE_CARD': return {\n      data: deleteCard(state.data, action.columnId, action.cardId),\n    };\n    case 'MOVE_TO': return {\n      data: moveTo(state.data, action.from, action.to, action.draggableId),\n    };\n    case 'MOVE_TO_CARD': return {\n      data: moveToCard(state.data, action.source, action.destination, action.draggableId),\n    };\n    case 'MOVE_CARD_TO_NEW_COLUMN': return {\n      data: moveCardToNewColumn(state.data, action.result),\n    };\n    case 'SET_COLUMN_TITLE': return {\n      data: setColumnTitle(state.data, action.id, action.newTitle),\n    };\n    case 'SET_CARD_TITLE': return {\n      data: setCardTitle(state.data, action.id, action.newTitle),\n    };\n    default: return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './index.scss';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { getAllData } from './db/DB';\nimport appReducer from './redux/appReducer/appReducer';\n\n(async function pointOfEntry() {\n  const db = await getAllData();\n\n  const obj = {\n    data: db,\n  };\n\n  const store = createStore(appReducer, obj);\n\n  const app = (\n    <Provider store={store}>\n      <App />\n    </Provider>\n  );\n\n  ReactDOM.render(\n    app,\n    document.getElementById('root'),\n  );\n}());\n"],"sourceRoot":""}